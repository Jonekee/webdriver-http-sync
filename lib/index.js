// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var assert, buildRequester, createAlertApi, createCookieApi, createDebugApi, createElementApi, createLocationApi, createNavigationApi, createPageApi, createSession, createWindowApi, extend, http, parseResponseData, WebDriver;
  assert = require('assertive');
  http = require('./http');
  extend = require('underscore').extend;
  parseResponseData = require('./parse_response');
  createSession = require('./session');
  buildRequester = require('./request');
  createAlertApi = require('./alert_api');
  createCookieApi = require('./cookie_api');
  createElementApi = require('./element_api');
  createLocationApi = require('./location_api');
  createNavigationApi = require('./navigation_api');
  createPageApi = require('./page_api');
  createDebugApi = require('./debug_api');
  createWindowApi = require('./window_api');
  module.exports = WebDriver = function () {
    function WebDriver(serverUrl, desiredCapabilities, httpOptions) {
      var cache$, request, sessionId;
      if (null == httpOptions)
        httpOptions = {};
      assert.truthy('new WebDriver(serverUrl, desiredCapabilities, httpOptions) - requires serverUrl', serverUrl);
      assert.truthy('new WebDriver(serverUrl, desiredCapabilities, httpOptions) - requires desiredCapabilities', desiredCapabilities);
      request = buildRequester(httpOptions);
      cache$ = createSession(request, serverUrl, desiredCapabilities);
      sessionId = cache$.sessionId;
      this.capabilities = cache$.capabilities;
      this.http = http(request, serverUrl, sessionId);
      extend(this, createAlertApi(this.http));
      extend(this, createCookieApi(this.http));
      extend(this, createElementApi(this.http));
      extend(this, createLocationApi(this.http));
      extend(this, createNavigationApi(this.http));
      extend(this, createPageApi(this.http));
      extend(this, createDebugApi(this.http));
      extend(this, createWindowApi(this.http));
    }
    WebDriver.prototype.on = function (event, callback) {
      if (!(event === 'request' || event === 'response'))
        throw new Error("Invalid event name '" + event + "'. WebDriver only emits 'request' and 'response' events.");
      return this.http.on(event, callback);
    };
    WebDriver.prototype.close = function () {
      this.http['delete']('/');
    };
    WebDriver.prototype.evaluate = function (clientFunctionString) {
      var error, friendlyError, response;
      response = this.http.post('/execute', {
        script: clientFunctionString,
        args: []
      });
      try {
        return parseResponseData(response);
      } catch (e$) {
        error = e$;
        friendlyError = new Error('Error evaluating JavaScript: ' + clientFunctionString + '\n' + error.message);
        friendlyError.inner = error;
        throw friendlyError;
      }
    };
    return WebDriver;
  }();
}.call(this);
