// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var assert, createElement, createElements, Element, http, inspect, json, parseElement, parseResponseData;
  http = require('./http');
  assert = require('assertive');
  json = require('./json');
  Element = require('./element');
  parseResponseData = require('./parse_response');
  inspect = require('util').inspect;
  createElement = function (http, selector, root) {
    var response;
    response = http.post('' + root + '/element', {
      using: 'css selector',
      value: selector
    });
    return parseElement(http, parseResponseData(response).ELEMENT);
  };
  createElements = function (http, selector, root) {
    var elements, response;
    response = http.post('' + root + '/elements', {
      using: 'css selector',
      value: selector
    });
    elements = parseResponseData(response);
    return function (accum$) {
      var element;
      for (var i$ = 0, length$ = elements.length; i$ < length$; ++i$) {
        element = elements[i$];
        accum$.push(parseElement(http, element.ELEMENT));
      }
      return accum$;
    }.call(this, []);
  };
  parseElement = function (http, elementId) {
    if (elementId) {
      return new Element(http, elementId);
    } else {
      return null;
    }
  };
  module.exports = Element = function () {
    function Element(param$, param$1) {
      this.http = param$;
      this.elementId = param$1;
      assert.truthy('new Element(http, elementId) - requires http', this.http);
      assert.truthy('new Element(http, elementId) - requires elementId', this.elementId);
      this.root = '/element/' + this.elementId;
    }
    Element.prototype.inspect = function () {
      return inspect(this.constructor.prototype);
    };
    Element.prototype.get = function (attribute) {
      var pathname, response;
      assert.truthy('get(attribute) - requires attribute', attribute);
      pathname = attribute === 'text' ? '' + this.root + '/text' : '' + this.root + '/attribute/' + attribute;
      response = this.http.get(pathname);
      return parseResponseData(response);
    };
    Element.prototype.getElement = function (selector) {
      return createElement(this.http, selector, this.root);
    };
    Element.prototype.getElements = function (selector) {
      return createElements(this.http, selector, this.root);
    };
    Element.prototype.getLocation = function () {
      var response;
      response = this.http.get('' + this.root + '/location');
      return parseResponseData(response);
    };
    Element.prototype.getLocationInView = function () {
      var response;
      response = this.http.get('' + this.root + '/location_in_view');
      return parseResponseData(response);
    };
    Element.prototype.getSize = function () {
      var response;
      response = this.http.get('' + this.root + '/size');
      return parseResponseData(response);
    };
    Element.prototype.isVisible = function () {
      var data, response;
      response = this.http.get('' + this.root + '/displayed');
      data = null != response.body ? response.body.toString() : void 0;
      return json.tryParse(data).value;
    };
    Element.prototype.click = function () {
      this.http.post('' + this.root + '/click');
    };
    Element.prototype.type = function (strings) {
      strings = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];
      assert.truthy('type(strings) - requires strings', strings);
      this.http.post('' + this.root + '/value', { value: strings });
    };
    Element.prototype.clear = function () {
      this.http.post('' + this.root + '/clear');
    };
    return Element;
  }();
}.call(this);
